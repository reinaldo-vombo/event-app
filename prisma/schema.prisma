// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid()) // Unique User ID
  name     String // Full name
  email    String   @unique
  password String // Null if using OAuth
  image    String? // Profile picture URL
  bio      String? // Short user bio
  events   Event[]
  username String   @unique // Unique username for mentions
  role     UserRole @default(PARTICIPANT) // User can be an organizer or participant
  rsvps    RSVP[]

  // Authentication
  //sessions Session[] // Active user sessions

  // Location Tracking
  lat Float? // Latitude
  lng Float? // Longitude

  // Social Features
  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  // Privacy & Notifications
  isPrivate Boolean  @default(false) // Private profile setting
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Follower System (Many-to-Many)
model Follower {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

// User Roles (Organizer or Participant)
enum UserRole {
  ORGANIZER
  PARTICIPANT
}

model Event {
  id           String    @id @default(uuid())
  title        String
  description  String    @db.Text
  slug         String    @unique
  thumbnail    String
  category     String
  tags         Json?
  price        Json?
  status       String
  tickets      String
  gallery      Json?
  video        String?
  guests       Guest[]
  startDate    DateTime
  endDate      DateTime?
  latitude     Float
  longitude    Float
  locationName String
  rsvps        RSVP[] // RSVP relation
  organizerId  String
  organizer    User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model RSVP {
  id      String     @id @default(uuid())
  userId  String
  eventId String
  status  RSVPStatus @default(INTERESTED)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // Ensure one RSVP per user per event
}

enum RSVPStatus {
  GOING
  INTERESTED
  NOT_GOING
}

model Guest {
  id      String  @id @default(uuid())
  name    String
  avatar  String
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])
}
